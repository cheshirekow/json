#pragma once
// This file was generated by json_gen.py

{% for filename in sorted(ctx.header_includes) -%}
#include "{{filename}}"
{% endfor %}

namespace json {
namespace stream {

{% for fqname, fields in sorted(ctx.specs) %}
int ParseField(const re2::StringPiece& key, const Event& event,
               LexerParser* stream, {{fqname}}* out);
void ParseValue(const Event& event, LexerParser* stream, {{fqname}}* out);
void EmitValue(const {{fqname}}& value, const SerializeOpts& opts,
               size_t depth, BufPrinter* out);

template <class U>
void WalkValue(const {{fqname}}& value, const WalkOpts& opts, U* walker);
template <class U>
void WalkValue(const WalkOpts& opts, {{fqname}}* value, U* walker);
{% endfor %}

}  // namespace stream
}  // namespace json

//
//
//
// =============================================================================
//                           Template implementations
// =============================================================================
//
//
//

namespace json {
namespace stream {

{% for fqname, fields in sorted(ctx.specs) %}
  template <class T>
  void WalkValue(const {{fqname}}& value, const WalkOpts& opts, T* walker) {
    WalkEvent event;
    event.typeno = WalkEvent::LIST_BEGIN;
    walker->ConsumeEvent(event);
    {% for field in fields %}
    event.typeno = WalkEvent::OBJECT_KEY;
    walker->ConsumeEvent(event);
    walker->ConsumeValue("{{field}}");
    event.typeno = WalkEvent::VALUE;
    walker->ConsumeEvent(event);
    WalkValue(value.{{field}}, opts, walker);
    {% endfor %}
    event.typeno = WalkEvent::LIST_END;
    walker->ConsumeEvent(event);
  }

  template <class T>
  void WalkValue(const WalkOpts& opts, {{fqname}}* value, T* walker) {
    WalkEvent event;
    event.typeno = WalkEvent::LIST_BEGIN;
    walker->ConsumeEvent(event);
    {% for field in fields %}
    event.typeno = WalkEvent::OBJECT_KEY;
    walker->ConsumeEvent(event);
    walker->ConsumeValue("{{field}}");
    event.typeno = WalkEvent::VALUE;
    walker->ConsumeEvent(event);
    WalkValue(opts, &value->{{field}}, walker);
    {% endfor %}
    event.typeno = WalkEvent::LIST_END;
    walker->ConsumeEvent(event);
  }
{% endfor %}

}  // namespace stream
}  // namespace json
