// This file was generated by json_gen.py

#include "{{headerpath}}"

{% for filename in sorted(ctx.source_includes) -%}
#include "{{filename}}"
{% endfor %}

namespace json {
namespace stream {

{% for fqname, fields in sorted(ctx.specs) %}

  int ParseField(const re2::StringPiece& key, const Event& event,
                 LexerParser* stream, {{fqname}}* out) {
    uint64_t keyid = RuntimeHash(key);
    switch (keyid) {
      {% for field in fields %}
      case Hash("{{field}}"):
        ParseValue(event, stream, &out->{{field}});
        break;
      {% endfor %}
      default:
        SinkValue(event, stream);
        return 1;
    }
    return 0;
  }

  void ParseValue(const Event& event, LexerParser* stream, {{fqname}}* out) {
    ParseObject(event, stream, out);
  }

  void EmitValue(const {{fqname}}& value, const SerializeOpts& opts,
                 size_t depth, BufPrinter* out) {
    (*out)("{");
    if (opts.indent) {
      (*out)("\n");
    }
    {% for field in fields -%}
    EmitField("{{field}}", value.{{field}}, opts, depth, out);
    {%- if not loop.last %}
    EmitFieldSep(opts, out);
    {%- endif %}
    {% endfor %}
    {%- if fields %}
    if (opts.indent) {
      (*out)("\n");
    }
    {%- endif %}
    FmtIndent(out, opts.indent, depth);
    (*out)("}");
  }
{% endfor %}

} // namespace stream
} // namespace json
